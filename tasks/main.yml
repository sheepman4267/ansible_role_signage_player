- name: Set configuration facts
  when: signage_browser != 'custom'
  block:
    - name: Set facts for Ubuntu/Debian
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      block:
      - name: Set facts for Chrome
        when: signage_browser == 'chrome'
        ansible.builtin.set_fact:
          signage_browser_package: "google-chrome-stable"
          signage_browser_window_name: "chrome"
          signage_browser_command: "/usr/bin/google-chrome-stable --kiosk"
      
      - name: Set facts for Chromium
        when: signage_browser == 'chromium'
        ansible.builtin.set_fact:
          signage_browser_package: "chromium-browser"
          signage_browser_window_name: "chromium"
          signage_browser_command: "/usr/bin/chromium-browser --kiosk"

      - name: Set facts for Firefox
        when: signage_browser == 'firefox'
        ansible.builtin.set_fact:
          signage_browser_package: "firefox"
          signage_browser_window_name: "firefox"
          signage_browser_command: "MOZ_USE_XINPUT2=1 /usr/bin/firefox -kiosk"

      - name: Set facts for Firefox ESR
        when: signage_browser == 'firefox-esr'
        ansible.builtin.set_fact:
          signage_browser_package: "firefox-esr"
          signage_browser_window_name: "firefox"
          signage_browser_command: "MOZ_USE_XINPUT2=1 /usr/bin/firefox-esr -kiosk"
    - name: Set facts for RHEL-based distro
      when: ansible_distribution == 'Fedora' or ansible_distribution == 'Rocky'
      block:
      - name: Set facts for Chrome
        when: signage_browser == 'chrome'
        ansible.builtin.set_fact:
          signage_browser_package: "google-chrome-stable"
          signage_browser_window_name: "chrome"
          signage_browser_command: "/usr/bin/google-chrome-stable --kiosk"
      
      - name: Set facts for Chromium
        when: signage_browser == 'chromium'
        ansible.builtin.set_fact:
          signage_browser_package: "chromium-browser"
          signage_browser_window_name: "chromium"
          signage_browser_command: "/usr/bin/chromium-browser --kiosk"

      - name: Set facts for Firefox
        when: signage_browser == 'firefox'
        ansible.builtin.set_fact:
          signage_browser_package: "firefox"
          signage_browser_window_name: "firefox"
          signage_browser_command: "MOZ_USE_XINPUT2=1 /usr/bin/firefox -kiosk"

      - name: Set facts for Firefox ESR
        when: signage_browser == 'firefox-esr'
        ansible.builtin.set_fact:
          signage_browser_package: "firefox-esr"
          signage_browser_window_name: "firefox"
          signage_browser_command: "MOZ_USE_XINPUT2=1 /usr/bin/firefox-esr -kiosk"
      
      - name: Set facts for OpenKiosk
        when: signage_browser == 'openkiosk'
        ansible.builtin.set_fact:
          signage_browser_package: "/tmp/OpenKiosk115.20.0-2025-02-16-x86_64.rpm"
          signage_browser_window_name: "OpenKiosk"
          signage_browser_command: "MOZ_USE_XINPUT2=1 OpenKiosk"

      - name: Set facts for OpenKiosk Alpha
        when: signage_browser == 'openkiosk-alpha'
        ansible.builtin.set_fact:
          signage_browser_package: "/tmp/OpenKiosk128.12.0-2025-07-06-x86_64.rpm"
          signage_browser_window_name: "OpenKiosk"
          signage_browser_command: "MOZ_USE_XINPUT2=1 OpenKiosk"

- name: Debian-based distro - Ensure package requirements are met
  become: yes
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
  tags: setup
  block:
    - name: Fail if trying to use OpenKiosk on Debian-based distro
      ansible.builtin.debug:
        msg: "OpenKiosk cannot currently be installed by this role on Debian-based distributions. This functionality could be added, but isn't necessary in currently known deployments. If you wish to use this role to deploy OpenKiosk on Ubuntu or Debian, please file an issue at https://github.com/sheepman4267/ansible_role_signage_player. PRs are also welcome to implement this functionality."
      when: "signage_browser == 'openkiosk'"
    
    - name: Actually exit if trying to use OpenKiosk on Debian-based distro
      ansible.builtin.meta: end_host
      when: "signage_browser == 'openkiosk'"

    - name: Ensure signing key for Google Chrome PPA is up to date
      ansible.builtin.get_url:
        url: https://dl-ssl.google.com/linux/linux_signing_key.pub
        dest: /etc/apt/trusted.gpg.d/google_linux_signing_key.pub
      when: "signage_browser_package == 'google-chrome-stable'"
    
    - name: Ensure Google Chrome PPA is present
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/etc/apt/trusted.gpg.d/google_linux_signing_key.pub] http://dl.google.com/linux/chrome/deb/ stable main
        filename: google-chrome
      when: "signage_browser_package == 'google-chrome-stable'"

    - name: Update apt repositories
      ansible.builtin.apt:
        update_cache: yes

    - name: Ensure required packages are installed
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - xorg
        - xinit
        - xdotool
        - x11-xserver-utils
        - python3
        
    - name: Ensure Browser is installed
      ansible.builtin.apt:
        name:
          - "{{ signage_browser_package }}"
        state: present

- name: RedHat-based distro - Ensure package requirements are met
  become: yes
  when: ansible_distribution == 'Fedora' or ansible_distribution == 'Rocky'
  tags: setup
  block:
    - name: Ensure required packages are installed
      ansible.builtin.dnf:
        name:
          - xorg-x11-server-Xorg
          - xorg-x11-xinit
          - xdotool
          - xrandr
          #- x11-xserver-utils
          - python3
          - xeyes
        state: present
    
    - name: Fetch OpenKiosk package
      ansible.builtin.get_url:
        url: https://www.mozdevgroup.com/dropbox/okcd/115/release/OpenKiosk115.20.0-2025-02-16-x86_64.rpm
        dest: /tmp/OpenKiosk115.20.0-2025-02-16-x86_64.rpm
      when: "signage_browser == 'openkiosk'"

    - name: Fetch OpenKiosk Alpha package
      ansible.builtin.get_url:
        url: https://www.mozdevgroup.com/dropbox/okcd/128/alpha/OpenKiosk128.12.0-2025-07-06-x86_64.rpm
        dest: /tmp/OpenKiosk128.12.0-2025-07-06-x86_64.rpm
      when: "signage_browser == 'openkiosk-alpha'"

    - name: Ensure Browser is installed
      ansible.builtin.dnf:
        name:
          - "{{ signage_browser_package }}"
        state: present
      when:
        - "signage_browser != 'openkiosk'"
        - "signage_browser != 'openkiosk-alpha'"

    - name: Ensure OpenKiosk is installed
      ansible.builtin.dnf:
        name:
          - "{{ signage_browser_package }}"
        state: present
        disable_gpg_check: true
      when: ("signage_browser == 'openkiosk'") or ("signage_browser == 'openkiosk-alpha'")

- name: System configuration
  become: yes
  tags: setup 
  block:
    - name: Ensure signage system user exists
      ansible.builtin.user:
        name: "{{ signage_user }}"
        comment: User for ansible-digital-signage

    - name: Create signage directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - "/var/ansible-digital-signage"
        - "/opt/ansible-digital-signage"
 
    - name: Ensure signage cache files exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: touch
        owner: "{{ signage_user }}"
        group: "{{ signage_user }}"
        mode: 0755
      loop:
        - /var/ansible-digital-signage/current
        - /var/ansible-digital-signage/display-output
    
    - name: Install default/placeholder HTML file
      ansible.builtin.copy:
        src: "{{ signage_placeholder }}"
        dest: "/opt/ansible-digital-signage/signage-placeholder.html"
        owner: "{{ signage_user }}"
        group: "{{ signage_user }}"
    
    - name: Install systemd units for signage display
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: 0664
      loop:
        - { src: "files/signage-startx.service.j2", dest: "/etc/systemd/system/signage-startx.service" }
        - { src: "files/signage-xinitrc.j2", dest: "/home/signage/.xinitrc"}
        - { src: "files/signage-chrome.service.j2", dest: "/etc/systemd/system/signage-chrome.service" }
        - { src: "files/signage-display-off.service.j2", dest: "/etc/systemd/system/signage-display-off.service" }
        - { src: "files/signage-refresh.service.j2", dest: "/etc/systemd/system/signage-refresh.service" }
        - { src: "files/signage-autoreload.service.j2", dest: "/etc/systemd/system/signage-autoreload.service" }
        - { src: "files/signage-autoreload.timer.j2", dest: "/etc/systemd/system/signage-autoreload.timer" }
        - { src: "files/signage-refresh.timer.j2", dest: "/etc/systemd/system/signage-refresh.timer" }

    - name: Force systemd to reread configs
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable main Signage SystemD Units
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: yes
      loop:
        - signage-startx.service
        - signage-refresh.timer
        - signage-refresh.service

    - name: Enable and start autoreload units
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - signage-autoreload.timer
        - signage-autoreload.service
      when: signage_reload

    - name: Disable and stop autoreload units
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop:
        - signage-autoreload.timer
        - signage-autoreload.service
      when: signage_reload|bool == false
      
    - name: Install Python scripts
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ signage_user }}"
        group: "{{ signage_user }}"
      loop:
        - { src: "files/signage-refresh.py", dest: "/opt/ansible-digital-signage/signage-refresh.py" }
        - { src: "files/detect-primary-display.py", dest: "/opt/ansible-digital-signage/detect-primary-display.py" }

- name: Start X11
  become: yes
  ansible.builtin.systemd:
    name: signage-startx.service
    state: started

- name: Wait for X11...
  ansible.builtin.pause:
    seconds: 5

- name: Temporarily set the current URL to the first schedule item, regardless of schedule
  ansible.builtin.template:
    src: "files/current.j2"
    dest: "/var/ansible-digital-signage/current"
    owner: "{{ signage_user }}"
    group: "{{ signage_user }}"
    mode: 0755

- name: Deal with Chrome on first run
  when: ("signage_browser_package == 'google-chrome-stable'") or ("signage_browser_package == 'chromium-browser'")
  tags: setup
  block:
  - name: Install bash script to dismiss Chrome's first run dialog
    ansible.builtin.copy:
      src: files/chrome-firstrun-workaround.sh
      dest: /opt/ansible-digital-signage/chrome-firstrun-workaround.sh
      owner: "{{ signage_user }}"
      group: "{{ signage_user }}"
    become: yes
  
  - name: Start Chrome
    become: yes
    ansible.builtin.systemd:
      name: signage-chrome.service
      state: started
  
  - name: Wait for Chrome...
    ansible.builtin.pause:
      seconds: 10

  - name: Dismiss Chrome's first run dialog
    ansible.builtin.command:
      cmd: "sudo -u {{ signage_user }} bash /opt/ansible-digital-signage/chrome-firstrun-workaround.sh"
      creates: "/home/{{ signage_user }}/chrome-has-been-run"
    become: yes

  - name: Wait for Chrome...
    ansible.builtin.pause:
      seconds: 10
      
  - name: Stop Chrome
    become: yes
    ansible.builtin.systemd:
      name: signage-chrome.service
      state: stopped

- name: Handle Schedule
  tags: update-schedule
  become: yes
  block:
    - name: Write schedule file
      ansible.builtin.template:
        src: "files/signage-schedule.j2"
        dest: "/var/ansible-digital-signage/signage-schedule"
        owner: "{{ signage_user }}"
        group: "{{ signage_user }}"
        mode: 0664
    
    - name: Install/update timers
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: 0664
      loop:
        - { src: "files/signage-autoreload.timer.j2", dest: "/etc/systemd/system/signage-autoreload.timer" }
        - { src: "files/signage-refresh.timer.j2", dest: "/etc/systemd/system/signage-refresh.timer" }

    - name: Polish the installation
      become: yes
      tags: update-schedule
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - signage-refresh.service
        - signage-refresh.timer


    

